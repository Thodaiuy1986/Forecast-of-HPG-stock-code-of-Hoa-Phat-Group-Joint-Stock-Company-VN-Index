# -*- coding: utf-8 -*-
"""Project predict HPG stock VN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DjOgiDTpskbi_0l9gqjdsQcEKXmCuVlI
"""

from google.colab import drive
drive.mount('/content/drive')

import requests
import json
from datetime import date,datetime, timedelta
import numpy as np
import pandas as pd
import yfinance as yf
import tensorflow as tf
from tensorflow.keras.layers import Dense, LSTM
from tensorflow.keras.models import Sequential
from sklearn.preprocessing import MinMaxScaler
from pandas import DataFrame
import datetime
import matplotlib.pyplot as plt

def get_price_function (ma_chung_khoan):

  cookies = {
    '__RC': '5',
    'favorite_stocks_state': '1',
    '__R': '3',
    '__tb': '0',
    'dtdz': '9402575f-0639-4d95-ba33-51d75f546fa6',
    '__admUTMtime': '1696906255',
    '_uidcms': '2914039761731989523',
    '_uidcms': '2914039761731989523',
    '__IP': '1731989523',
    'ASP.NET_SessionId': 'l5xtkqm432a4ufwn24rhqz2q',
    '_gid': 'GA1.2.1511612829.1699246365',
    '_ga_860L8F5EZP': 'GS1.1.1699346701.57.1.1699346714.0.0.0',
    '_ga': 'GA1.1.918773242.1694002578',
    '__uif': '__uid%3A2914039761731989523%7C__ui%3A1%252C5%7C__create%3A1661403976',
    '_ga_XLBBV02H03': 'GS1.1.1699346714.7.1.1699347294.0.0.0',
    '_ga_D40MBMET7Z': 'GS1.1.1699346714.7.1.1699347294.0.0.0',
}

  headers = {
    'Accept': '*/*',
    'Accept-Language': 'en-US,en;q=0.9',
    'Cache-Control': 'no-cache',
    'Connection': 'keep-alive',
    # 'Cookie': '__RC=5; favorite_stocks_state=1; __R=3; __tb=0; dtdz=9402575f-0639-4d95-ba33-51d75f546fa6; __admUTMtime=1696906255; _uidcms=2914039761731989523; _uidcms=2914039761731989523; __IP=1731989523; ASP.NET_SessionId=l5xtkqm432a4ufwn24rhqz2q; _gid=GA1.2.1511612829.1699246365; _ga_860L8F5EZP=GS1.1.1699346701.57.1.1699346714.0.0.0; _ga=GA1.1.918773242.1694002578; __uif=__uid%3A2914039761731989523%7C__ui%3A1%252C5%7C__create%3A1661403976; _ga_XLBBV02H03=GS1.1.1699346714.7.1.1699347294.0.0.0; _ga_D40MBMET7Z=GS1.1.1699346714.7.1.1699347294.0.0.0',
    'Pragma': 'no-cache',
    'Referer': 'https://s.cafef.vn/lich-su-giao-dich-vhm-1.chn',
    'Sec-Fetch-Dest': 'empty',
    'Sec-Fetch-Mode': 'cors',
    'Sec-Fetch-Site': 'same-origin',
    'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36',
    'sec-ch-ua': '"Google Chrome";v="119", "Chromium";v="119", "Not?A_Brand";v="24"',
    'sec-ch-ua-mobile': '?0',
    'sec-ch-ua-platform': '"macOS"',
}

  params = {
      'Symbol': ma_chung_khoan,
      'StartDate': '',
      'EndDate':'' ,
      'PageIndex': '1',
      'PageSize': '10000',
  }

  response = requests.get(
      'https://s.cafef.vn/Ajax/PageNew/DataHistory/PriceHistory.ashx',
      params=params,
      cookies=cookies,
      headers=headers,
  )
  result  = []
  for i in (json.loads(response.text)['Data']['Data']):
      d = dict()
      d['Ngay'] = i['Ngay']
      d['GiaDieuChinh'] = i['GiaDieuChinh']
      d['GiaDongCua'] = i['GiaDongCua']
      d['ThayDoi'] = i['ThayDoi']
      d['KhoiLuongKhopLenh'] = i['KhoiLuongKhopLenh']
      d['GiaTriKhopLenh'] = i['GiaTriKhopLenh']
      d['GiaMoCua'] = i['GiaMoCua']
      d['GiaCaoNhat'] = i['GiaCaoNhat']
      d['GiaThapNhat'] = i['GiaThapNhat']
      result.append(d)
  df = pd.DataFrame(result)
  df['Rate'] = df['ThayDoi'].str.split('(', expand=True)[1].str.replace(' %','').str.replace(')','')
  df['Rate'] = df['Rate'].astype(float)
  df['Ngay'] = pd.to_datetime(df['Ngay'], format='%d/%m/%Y')

  return df

df_HPG = get_price_function('HPG')

df_HPG = df_HPG[['Ngay','GiaDieuChinh','GiaMoCua','GiaThapNhat','GiaCaoNhat','GiaDongCua']]
df_HPG.rename(columns={'Ngay': 'Date', 'GiaDieuChinh': 'Price'}, inplace=True)

df_HPG

from datetime import date, timedelta, datetime

# Lấy ngày hiện tại
today = date.today()

# Chuyển đổi thành datetime với thời gian là 00:00:00
end_date = datetime.combine(today, datetime.min.time())
start_date = end_date - timedelta(days=3*365)  # 3 năm trước

# Chuyển đổi ngày sang định dạng chuỗi
start_date_str = start_date.strftime('%d/%m/%Y')
end_date_str = end_date.strftime('%d/%m/%Y')

# In ra kết quả
print("Ngày bắt đầu:", start_date_str)
print("Ngày kết thúc:", end_date_str)

# So sánh với end_date
df_HPG_sort = df_HPG[df_HPG['Date'] > start_date_str]

df_HPG_sort

df_HPG_sort = df_HPG_sort[['Date','Price']]
# df_HPG_sort.rename(columns={'Ngay': 'Date', 'GiaDieuChinh': 'Price'}, inplace=True)

df_HPG_sort

def Predict_future_prices_stocks (df: DataFrame):
  df['Date'] = pd.to_datetime(df['Date'])
  df.sort_values('Date',inplace=True)
  df.set_index('Date',inplace=True)
  y = df['Price']
  y = y.values.reshape(-1, 1)
  scaler = MinMaxScaler(feature_range=(0, 1))
  scaler = scaler.fit(y)
  y = scaler.transform(y)
  n_lookback = 60
  n_forecast = 120
  X = []
  Y = []

  for i in range(n_lookback, len(y) - n_forecast + 1):
    X.append(y[i - n_lookback: i])
    Y.append(y[i: i + n_forecast])
  X = np.array(X)
  Y = np.array(Y)
  # fit the model
  model = Sequential()
  model.add(LSTM(units=50, return_sequences=True, input_shape=(n_lookback, 1)))
  model.add(LSTM(units=50))
  model.add(Dense(n_forecast))

  model.compile(loss='mean_squared_error', optimizer='adam')
  model.fit(X, Y, epochs=100, batch_size=32, verbose=0)
  # generate the forecasts
  X_ = y[- n_lookback:]  # last available input sequence
  X_ = X_.reshape(1, n_lookback, 1)

  Y_ = model.predict(X_).reshape(-1, 1)
  Y_ = scaler.inverse_transform(Y_)

  df_past = df[['Price']].reset_index()
  df_past.rename(columns={'index': 'Date', 'Price': 'Actual'}, inplace=True)
  df_past['Date'] = pd.to_datetime(df_past['Date'])
  df_past['Forecast'] = np.nan
  df_past['Forecast'].iloc[-1] = df_past['Actual'].iloc[-1]
  df_future = pd.DataFrame(columns=['Date', 'Actual', 'Forecast'])
  df_future['Date'] = pd.date_range(start=df_past['Date'].iloc[-1] + pd.Timedelta(days=1), periods=n_forecast)
  df_future['Forecast'] = Y_.flatten()
  df_future['Actual'] = np.nan

  past = df_past[['Date','Actual']]
  past.rename(columns={'Actual':'Price'},inplace=True)
  predict = df_future[['Date','Forecast']]
  predict.rename(columns={'Forecast':'Price'},inplace=True)

  results = pd.concat([predict], ignore_index=False).set_index('Date')
  # results = pd.concat([past, predict], ignore_index=False).set_index('Date')
  results = results.reset_index()
  results['Price'] = results['Price'].astype('float')

  return results

tf.device("/GPU:0")

HPG_pre = Predict_future_prices_stocks(df_HPG_sort )

HPG_pre

HPG_pre = HPG_pre.sort_index(ascending= False)

HPG_pre

import matplotlib.pyplot as plt

# Create the figure and axis
fig, ax = plt.subplots(figsize=(12, 6))

# Plot the 'Price' column from HPG_pre
ax.plot(HPG_pre['Date'], HPG_pre['Price'], label='Predicted Values')

# Set the x-axis tick labels to be rotated 45 degrees and have a smaller font size
plt.xticks(rotation=45, fontsize=10)

# Add a legend and grid
ax.legend(loc='upper left')
ax.grid(True)

# Set the title and axis labels
ax.set_title('Price Over Time')
ax.set_xlabel('Date')
ax.set_ylabel('Price')

# Show the plot
plt.show()

pip install google-cloud-bigquery pandas

from google.cloud import bigquery
import pandas as pd

# Đặt biến môi trường cho file JSON key
import os
os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = "/content/drive/MyDrive/DA Hoang Long/Key big query/dphutho.json"

# Khởi tạo client BigQuery
client = bigquery.Client()

# Đặt tên dataset và table
dataset_id = 'stock'
table_id = 'HPG_pre1'

# Đặt tên bảng đầy đủ
table_ref = f"{dataset_id}.{table_id}"

# Chèn dữ liệu dự báo chứng khoán
df = HPG_pre

# Cấu hình job với WRITE_TRUNCATE
job_config = bigquery.LoadJobConfig(
    write_disposition=bigquery.WriteDisposition.WRITE_TRUNCATE  # Xóa dữ liệu cũ trước khi chèn
)

# Chèn dữ liệu vào bảng trong BigQuery
job = client.load_table_from_dataframe(df, table_ref, job_config=job_config)
# Chờ cho job hoàn thành
job.result()

print("Dữ liệu đã được chèn thành công!",table_id)

# Đặt tên dataset và table
dataset_id = 'stock'
table_id = 'HPG_occurated'

# Đặt tên bảng đầy đủ
table_ref = f"{dataset_id}.{table_id}"
# Chèn dữ liệu chứng khoán hiện tại
df = df_HPG

# Cấu hình job với WRITE_TRUNCATE
job_config = bigquery.LoadJobConfig(
    write_disposition=bigquery.WriteDisposition.WRITE_TRUNCATE  # Xóa dữ liệu cũ trước khi chèn
)

# Chèn dữ liệu vào bảng trong BigQuery
job = client.load_table_from_dataframe(df, table_ref, job_config=job_config)
# Chờ cho job hoàn thành
job.result()

print("Dữ liệu đã được chèn thành công!",table_id)